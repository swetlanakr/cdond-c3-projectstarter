version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
              cd frontend
              npm install
              npm run test
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan the frontend for vulnerabilities
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan the backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text > inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt  
# Here's where you will add some code to rollback on failure    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["33:e8:e6:2b:6f:ec:39:36:4d:3d:62:ce:2c:97:36:48"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i /tmp/ansible/inventory configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: [circleci/node:13.8.0, amazon/aws-cli]
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            #npm run build
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update KVDB..."
              curl https://kvdb.io/S92RkedR6mWgtZxgZ4DKmF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl https://kvdb.io/S92RkedR6mWgtZxgZ4DKmF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"     
      - destroy-environment
#      - revert-migrations
     # Here's where you will add some code to rollback on failure   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [deploy-infrastructure, configure-infrastructure]
